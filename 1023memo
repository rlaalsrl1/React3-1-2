1.Static Resource
정적 자원 중 이미지 파일은 SEO에 많은 영향을 미침
다운로드 시간이 많이 걸리고, 렌더링 후에 레이아웃이 변경되는 등 UX에 영향을 미침
이것을 누적 레이아웃 이동 (CLS : Cumulative Layout Shift)이라고 함
Image 컴포넌트를 사용하면 CLS문제를 해결합니다
Lazy loding: 이미지 로드 시점을 필요할 때까지 지연시키는 기술
이미지 사이즈 최적화로 사이즈를 1/10이하로 줄여줌
Placeholder를 제공
1-Image component -local
정적 자원은 기본적으로 public 디렉토리에 저장합니다.
정적 자원은 번들링 이후에도 변하지 않기 때문입니다
여러종류의 정적 자원들 사용할 경우 public의 root에 각각 디렉토리를 만들어 사용함
Image도 마찬가지로 /public/Image 디렉토리를 만들고 사용
이미지를 불러오는 방법은 직접 불러오는 방법과 import하는 방법 2가지가 있음
이미지 경로 /Images/[이미지 이름. 확장자] 로 합니다. 이때 public는 생략함

Image component - Remote
Pixabay와 같은 외부 이미지를 사용하려면 next.config.mjs에 URL을 추가해야 합니다.
만일 파일이 없다면 

대단원 4장 코드 구성과 데이터 불러오기 
04-1 디렉토리 구조 구성 
04-2 데이터 불러오기
4. 코드 구성과 데이터 불러오기
-4장에서는 애플리케이션의 디렉터리구조를 어떻게 구성하는지 알아봅니다
-클라이언트와 서버에서 외부 REST API 및 GraphQL API를 사용하는 방법도 알아 봅니다
-프로젝트를 시작할 때 애플리케이션의 확장과 복잡도 증가에 대비해야합니다
4-1절 에서는 애플리케이션 상태를 빠르고 간결하게 관라할 수 있는 코드 구성 방법을 알아봅니다

4.1 디렉토리 구조 구성
-Next.js 에서는 특정 파일과 디렉토리가 지정된 위치에 있어야 합니다
_app.js나 _document.js 파일, pages/와 /public/
-Node_modules/: Next.js 프로젝트의 의존성 패키지를 설치하는 디렉토리
-pages/: 애플리케이션의 페이지 파일을 저장하고 라우팅 시스템 관리
-public/: 컴파일된 CSS 및 자바 스크립트 파일, 이미지, 아이콘 등의 정적 자원관리
-styles/: 스타일링 포맷(CSS, SASS, LESS등) 과 관계없이 스타일링 모듈 관리

-pages/ 디렉토리를 src/ 디렉토리 안으로 옮길 수 있습니다.
-public/과 node_modules/를 제외한 다른 디렉토리는 모두 src/로 옮길 수 있습니다.

---컴포넌트 구성
-컴포넌트는 세 가지로 분류하고 각 컴포넌트와 관련된 스타일 및 테스트 파일을 같은 곳에 두어야 합니다
-코드를 더 효율적으로 구성하기 위해 아토믹 디자인 원칙에 따라 디렉토리를 구성합니다
atoms: 가장 기본적인 컴포넌틑 관리 예) button , input, p와 같은 표준 HTML요소를 감싸는 용도로 사용되는 컴포넌트
moleculdes : atom에 속한 컴포넌트 여러개를 조합하여 복잡한 구조로 만든 컴포넌트 관리. 예) input과 label을 합쳐서만든 새로운 컴포넌트
organisms : moleculdes와 atoms를 섞어서 더 복잡하게 만든 컴포넌트 관리 예)footer나 carousel컴포넌트.
templates: 위의 모든 컴포넌트를 어떻게 배치할지 결정해서 사용자가 접근할 수 있는 페이지

button 컴포넌트를 예를 들면 다음과 같이 최소한 세개의 파일을 만들어야 합니다.
컴포넌트 파일 , 스타일 파일, 테스트 파일 입니다
이렇게 컴포넌트를 구성하면 필요할때 컴포넌트를 찾고 수정하기 쉽습니다
mkdir components/atoms/button
cd components/atoms/button
touch index.js
touch button.test.js
touch button.styled.js  또는  style.module.css

--유틸리티 구성
-컴포넌트를 만들지 않는 코드 파일을 유틸리티 스크립트라고 합니다
-렌더링에 필요한 컴포넌트가 아닌 기타 필요한 스크립트가 있다면, utilities/ 디렉토리에 별도로 관리하는 것이 좋음
-그리고 각 유틸리티에 맞는 테스트 파일도 만듬

--정적 자원의 구성
-정적 자원은 public/디렉토리에서 관리합니다
-일반적인 웹 애플리케이션에서는 다음과 같은 정적 자원을 사용함
이미지, 컴파일한 jsp파일,컴파일한 CSS파일, 아이콘 ,mainfest.json, robot.txt 등의 정적 파일

--icons/디렉토리는 주로 웹 앱 매니페스트에 제공할 아이콘을 만듬

--스타일 파일 구성
-스타일 파일은 앱에서 어떤 스타일 관련 기술을 사용하는가에 따라 구성이 달라짐
-Emotion, styled-components, JSS와 같은 CSS-in-JS 프레임워크의 경우 컴포넌트별로 스타일 파일을 만듭니다. 이렇게 하면 스타일 변경도 쉬움
-만일 컬러 팔레트, 테마, 미디어 쿼리와 같은 공통 스타일의 경우는 styles/디렉토리를 사용합니다.
--lib파일 수성
-lib파일은 서드파티 라이브러리를 감싸는 스크립트를 말함
-lib파일은 특정 라이브러리에 특화된 것입니다. 예)GraphQL
-만인 GraphQL을 사용한다면, 클라이언트를 초기화 하고, 질의문과 뮤테이션을 저장하는 등의 작업이 필요함
-먼저 이런 스크립트를 좀 더 모듈화 하기 위해 프로젝트 root에 lib/graphql/디렉트로릴 만듬


4.2 데이터 불러오기 
-Next 는 클라이언트와 서버 모두에서 데이터를 불러올 수 있습니다
-서버는 다음 두가지 상황에서 데이터를 불러올 수 있습니다
1)정적 페이지를 만들때 getStaticProps 함수를 사용해서 ,빌드 시점에 데이터를 불러올 수 있음
2)서버가 페이지를 렌더링할때 getServerSideProps를 통해, 실행 도중 데이터를 불러올 수도 있음
-데이터 베이스에서 데이터를 가져 올 수도 있지만 안전하지 않기 때문에 권장하지 않음 데이터 베이스의 접근은 백엔드에서 처리하는것이 좋음
-Next는 프런트엔드만 담당하는 것이 좋음